plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.7'
    id 'org.beryx.jlink' version '2.9.4'
}
repositories {
    mavenCentral()
}

javafx {
//    version = "12"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.media' ]
}

group 'it.ma'
version '1.0-SNAPSHOT'
sourceCompatibility = 11
mainClassName = "$moduleName/it.ma.mototrainerp.Mototrainer"

//sourceSets {
//    main {
//        resources {
//            srcDirs = ["src/main/java/styles"]
//            includes = ["**/*.css"]
//        }
//    }
//}
jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'runmmtfx'
    }
}

configurations {
    customConfig.extendsFrom implementation
}
dependencies {
    implementation 'log4j:log4j:1.2.17'
    implementation 'commons-logging:commons-logging:1.2'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.12'
//    implementation group: 'com.github.purejavacomm', name: 'purejavacomm', version: '1.0.2.RELEASE'
    implementation  'com.fazecast:jSerialComm:[2.0.0,3.0.0)'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Check CRC MD5, SHA(1)..(512)',
                'Implementation-Version': version,
                'Main-Class': "$mainClassName"
    }
    baseName = project.name + '-all'
    from { configurations.customConfig.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task tree(type:Exec) {

    logging.captureStandardOutput LogLevel.LIFECYCLE
    logging.captureStandardError  LogLevel.ERROR

    // directory esecuzione comando
    //workingDir '.'
    String[] lst = workingDir.list()
    //on windows:
    commandLine 'cmd', '/c', 'tree.bat'


    doLast {
        println(lst.toString())
    }

    //store the output instead of printing to the console:
    //    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}
